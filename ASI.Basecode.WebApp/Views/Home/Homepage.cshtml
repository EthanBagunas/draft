@model ASI.Basecode.Services.ServiceModels.HomepageViewModel
@using ASI.Basecode.Data.Models
@using System.Linq
@using static ASI.Basecode.Resources.Views.Screen
@section Styles {
    <link rel="stylesheet" href="~/css/headerfinal.css" />
    <link rel="stylesheet" href="~/css/texts.css" />
    <link rel="stylesheet" href="~/css/homepage.css" />
    <link rel="stylesheet" href="~/css/homepagetable.css" />
    <link rel="stylesheet" href="~/css/booking-modal.css" />
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.6.0/css/all.min.css" />
    <link rel="icon" type="image/svg+xml" href="~/img/logo-invert.svg">
}
<!--copy ang script-->
@section Scripts {
    <script src="~/js/modal.js"></script>  
    <script src="~/js/booking-operations.js"></script>
    <script>
        console.log('Loading homepage scripts...');

        function filterHomepageTable() {
            const searchInput = document.getElementById('homeSearchInput');
            const filter = searchInput.value.toLowerCase().trim();
            const table = document.querySelector('.dash-table table');
            const rows = table.getElementsByTagName('tr');
            let visibleCount = 0;

            // Skip header row
            for (let i = 1; i < rows.length; i++) {
                const row = rows[i];
                const roomNameCell = row.getElementsByTagName('td')[1]; // Index 1 is Room Name column
                let shouldShow = false;

                if (filter === '') {
                    // Show all rows if search is empty
                    shouldShow = true;
                } else if (roomNameCell) {
                    const roomName = roomNameCell.textContent || roomNameCell.innerText;
                    // Check if room name contains search term
                    shouldShow = roomName.toLowerCase().indexOf(filter) > -1;
                }

                // Show/hide the row based on search match
                if (shouldShow) {
                    row.style.display = '';
                    visibleCount++;
                } else {
                    row.style.display = 'none';
                }
            }

            // Show/hide no results message
            updateNoResultsMessage(visibleCount, filter);

            // Log search results for debugging
            console.log(`Search: "${filter}" - Found ${visibleCount} matches`);
        }

        function updateNoResultsMessage(visibleCount, filter) {
            let noResultsMessage = document.querySelector('.no-results-message');
            
            // Create the message element if it doesn't exist
            if (!noResultsMessage) {
                noResultsMessage = document.createElement('div');
                noResultsMessage.className = 'no-results-message';
                const tableContainer = document.querySelector('.custom-table-container');
                tableContainer.appendChild(noResultsMessage);
            }

            if (visibleCount === 0 && filter !== '') {
                noResultsMessage.style.display = 'block';
                noResultsMessage.textContent = `No rooms found matching "${filter}"`;
            } else {
                noResultsMessage.style.display = 'none';
            }
        }

        // Add debounce function to improve performance
        function debounce(func, wait) {
            let timeout;
            return function executedFunction(...args) {
                const later = () => {
                    clearTimeout(timeout);
                    func(...args);
                };
                clearTimeout(timeout);
                timeout = setTimeout(later, wait);
            };
        }

        // Create debounced version of the filter function
        const debouncedFilterHomepage = debounce(filterHomepageTable, 300);

        // Add event listeners when document is ready
        document.addEventListener('DOMContentLoaded', function() {
            const searchInput = document.getElementById('homeSearchInput');
            if (searchInput) {
                searchInput.addEventListener('keyup', debouncedFilterHomepage);
                searchInput.addEventListener('search', debouncedFilterHomepage); // For clear button
            }
        });

        console.log('Homepage scripts loaded successfully');
    </script>
}
@{
    ViewBag.LoginView = true;
    ViewData["Title"] = "Dashboard";
}
<div class= "custom-main-container">
    <!--search -->
    <div class="custom-box">
        <input id="homeSearchInput" placeholder="Search room name...">
        <button><i class="fa-solid fa-magnifying-glass"></i></button>
    </div>
  <div class = "custom-search-filter-container">
    <div class= "home-page-title">
    <span class="page-title">Dashboard</span>
  </div>
    <!-- Filter and show all -->
    <div class="custom-filter-box">
        <!-- show  -->
        <div class= "show-box custom-main-text-normal"><span>Show:</span>
        <div class="custom-show-select custom-main-text-normal" id="dropdown">
        <span>All</span>
        <button><i class="fa-solid fa-caret-down"></i></button>
        <ul class="custom-show-options custom-main-text-normal"> 
            <li class="custom-show-options-li">All</li>
            <li class="custom-show-options-li">Vacant</li>
            <li class="custom-show-options-li">Occupied</li>
            <li class="custom-show-options-li">Reserved</li>
        </ul>   
      </div>
      </div>
    </div> 
  </div>
  <!--end-->

  <!--home table-->
  <div class="custom-table-container">
    <div class="dash-table">
      <table>
          <thead class = "th-text">
            <tr>
                <th>Status</th>
                <th>Room Name</th>
                <th>Capacity</th>
                <th>Guest Name</th>
                <th>Date Reserved</th>
                <th>Start Session</th>
                <th>End Session</th>
          </tr>
          </thead>

                <!--start sa content sa table-->
                <tbody class="td-text">
                  @foreach (var room in Model.Rooms)
                  {
                      var booking = Model.Bookings
                          .Where(b => b.RoomId == room.Id && b.Status != "COMPLETED" && b.Status != "CANCELLED")
                          .OrderBy(b => b.BookingDate)
                          .ThenBy(b => b.TimeIn)
                          .FirstOrDefault();
                      
                      var status = Model.RoomStatuses[room.Id];
                      
                      <tr onclick="openBookingModal(@room.Id)">
                          <td>
                              <p class="status status-@status.ToLower()-text status-@status.ToLower()">
                                  @status
                              </p>
                          </td>
                          <td>@room.Roomname</td>
                          <td>@room.MaxCapacity</td>
                          <td>@(booking != null ? booking.Customer?.Custfname : "--")</td>
                          <td>@(booking != null ? booking.BookingDate?.ToString("MM/dd/yyyy") : "--")</td>
                          <td>@(booking != null ? booking.TimeIn?.ToString(@"hh\:mm") : "--")</td>
                          <td>@(booking != null ? booking.TimeOut?.ToString(@"hh\:mm") : "--")</td>
                      </tr>
                  }
                </tbody>
      </table>
    </div>
  </div>
  <!--pagination -->
  <div class="custom-bottom-container">
     <div class="results-info">
        Showing 1 out of 10 results
    </div>
    <div class="custom-pagination-container">
        <div class="custom-pagination-btn">
            <button>
                <i class="fa-solid fa-angles-left"></i>
            </button>
             <button>
                <i class="fa-solid fa-angle-left"></i>
            </button>
            <a href="#">1</a>
             <button>
                <i class="fa-solid fa-angle-right"></i>
            </button>
             <button>
                <i class="fa-solid fa-angles-right"></i>
            </button>
        </div>
    </div>
    <div class="custom-add-container">
        <button class="add-booking-btn custom-main-white-text-normal" id="addUserForm" onclick="openModal()""><span>Add booking</span></button>
    </div>

  

 <!--modal html, copy ni-->
<div id="myModal" class="booking-modal">
    <div class="booking-modal-content">
        <span class="booking-close" onclick="closeModal()">&times;</span>
        <div class="booking-form-section">
            <h3>Add New Booking</h3>
            <form id="bookingForm" onsubmit="addBooking(event)">
                <div class="booking-form-group">
                    <label class="booking-label">Room</label>
                    <select id="roomSelect" name="roomId" class="booking-select" required>
                        <option value="">Select a room</option>
                    </select>
                </div>

                <div class="booking-form-group">
                    <label class="booking-label">Date</label>
                    <input type="date" id="bookingDate" name="bookingDate" 
                           class="booking-input" required>
                </div>

                <div class="booking-form-group">
                    <label class="booking-label">Start Time</label>
                    <select id="timeIn" name="timeIn" class="booking-select" required>
                        <option value="">Select start time</option>
                    </select>
                </div>

                <div class="booking-form-group">
                    <label class="booking-label">End Time</label>
                    <select id="timeOut" name="timeOut" class="booking-select" required>
                        <option value="">Select end time</option>
                    </select>
                </div>

                <div class="booking-form-group">
                    <label class="booking-label">Guest Name</label>
                    <input type="text" id="guestName" name="guestName" 
                           class="booking-input" placeholder="E" required>
                </div>

                <div class="booking-form-group">
                    <label class="booking-label">Contact Number</label>
                    <input type="tel" id="contactNumber" name="contactNumber" 
                           class="booking-input" required>
                </div>

                <div class="booking-btn-group">
                    <button type="button" class="booking-btn booking-btn-cancel" 
                            onclick="closeModal()">Cancel</button>
                    <button type="submit" class="booking-btn booking-btn-submit">Submit</button>
                </div>
            </form>
        </div>
    </div>
</div>


